# Напишите программу для. проверки истинности утверждения
# ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.

# Алгоритм
# 1. Ввести 3 переменные, присвоить им все возможные значения (2^3)
# 2. Переписать логическое выражение на язык python
# 3. Перебрать все возможные комбинации трех переменных (предикатов),
# подставив в обе части выражения
# 4. Выдать результат каждой итерации
# 5. Утверждение будет верным, если правая и левая части были равны в каждой итерации

# Таблица истинности высказывания
# X  Y	Z	X∨Y	 X∨Y∨Z  ¬(X∨Y∨Z)  ¬X  ¬Y  ¬Z  ¬X∧¬Y	 ¬X∧¬Y∧¬Z
# 0	 0	0	 0	   0	    1	   1   1   1	1     	1
# 0	 0	1	 0	   1	    0	   1   1   0	1     	0
# 0	 1	0	 1	   1	    0	   1   0   1	0     	0
# 0	 1	1	 1	   1	    0	   1   0   0	0     	0
# 1	 0	0	 1	   1	    0	   0   1   1	0     	0
# 1	 0	1	 1	   1	    0	   0   1   0	0     	0
# 1	 1	0	 1	   1	    0	   0   0   1	0     	0
# 1	 1	1	 1	   1	    0	   0   0   0	0     	0


predicate_1 = [0, 0, 0, 0, 1, 1, 1, 1]
predicate_2 = [0, 0, 1, 1, 0, 0, 1, 1]
predicate_3 = [0, 1, 0, 1, 0, 1, 0, 1]

correct = 0
for i in range(8):
    part_left = not (predicate_1[i] or predicate_2[i] or predicate_3[i])
    print(f'¬({predicate_1[i]} ⋁ {predicate_2[i]} ⋁ {predicate_3[i]}) = {part_left}')
    part_right = not predicate_1[i] and not predicate_2[i] and not predicate_3[i]
    print(f'¬{predicate_1[i]} ⋀ ¬{predicate_2[i]} ⋀ ¬{predicate_3[i]} = {part_right}')
    print()
    if part_left == part_right:
        correct += 1
if correct == 8:
    print('Утверждение истинно при любых значениях предикат')
else:
    print('Что-то пошло не так(')
